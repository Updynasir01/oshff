{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eng-hakimi\\\\Desktop\\\\oshaadToGo\\\\frontend\\\\src\\\\components\\\\ProtectedRoute.jsx\";\nimport React from 'react';\nimport { Navigate, Outlet } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst checkAuth = () => {\n  // Check if the authentication token exists in localStorage\n  // You might want to add more sophisticated checks here later,\n  // like verifying the token's expiry date or making an API call.\n  const token = localStorage.getItem('authToken'); // Use the same key as in MenuManagement & Login\n  return !!token; // Returns true if token exists, false otherwise\n};\nconst ProtectedRoute = () => {\n  const isAuthenticated = checkAuth();\n\n  // If authenticated, render the child routes/component using Outlet\n  // If not authenticated, redirect to the login page\n  return isAuthenticated ? /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 30\n  }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\",\n    replace: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 43\n  }, this);\n};\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","Outlet","jsxDEV","_jsxDEV","checkAuth","token","localStorage","getItem","ProtectedRoute","isAuthenticated","fileName","_jsxFileName","lineNumber","columnNumber","to","replace","_c","$RefreshReg$"],"sources":["C:/Users/eng-hakimi/Desktop/oshaadToGo/frontend/src/components/ProtectedRoute.jsx"],"sourcesContent":["import React from 'react';\r\nimport { Navigate, Outlet } from 'react-router-dom';\r\n\r\nconst checkAuth = () => {\r\n    // Check if the authentication token exists in localStorage\r\n    // You might want to add more sophisticated checks here later,\r\n    // like verifying the token's expiry date or making an API call.\r\n    const token = localStorage.getItem('authToken'); // Use the same key as in MenuManagement & Login\r\n    return !!token; // Returns true if token exists, false otherwise\r\n};\r\n\r\nconst ProtectedRoute = () => {\r\n    const isAuthenticated = checkAuth();\r\n\r\n    // If authenticated, render the child routes/component using Outlet\r\n    // If not authenticated, redirect to the login page\r\n    return isAuthenticated ? <Outlet /> : <Navigate to=\"/login\" replace />;\r\n};\r\n\r\nexport default ProtectedRoute; "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,MAAM,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EACpB;EACA;EACA;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;EACjD,OAAO,CAAC,CAACF,KAAK,CAAC,CAAC;AACpB,CAAC;AAED,MAAMG,cAAc,GAAGA,CAAA,KAAM;EACzB,MAAMC,eAAe,GAAGL,SAAS,CAAC,CAAC;;EAEnC;EACA;EACA,OAAOK,eAAe,gBAAGN,OAAA,CAACF,MAAM;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,gBAAGV,OAAA,CAACH,QAAQ;IAACc,EAAE,EAAC,QAAQ;IAACC,OAAO;EAAA;IAAAL,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC1E,CAAC;AAACG,EAAA,GANIR,cAAc;AAQpB,eAAeA,cAAc;AAAC,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}